local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Player = game.Players.LocalPlayer

local Window = OrionLib:MakeWindow({Name = "Radish Hub||NoScope Arcade", IntroText = "Radish Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "Radish Hub NoScope Arcade"})



OrionLib:MakeNotification({
	Name = "Radish Hub",
	Content = "Remember updates are always on the way!",
	Image = "rbxassetid://4483345998",
	Time = 5
})




--Aimbot

local AimbotTab = Window:MakeTab({
	Name = "Aimbot",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = AimbotTab:AddSection({
	Name = "Aimbot"
})

AimbotTab:AddToggle({
	Name = "Aimbot",
	Default = false,
	Callback = function(Value)
		local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Holding = false


--AIMBOT SETTINGS

_G.TeamCheck = teamcheck
_G.AimbotEnabled = Value
_G.AimPart = "Head"
_G.Sensitivity = 0.05

--FCIRCLE SETTINGS

_G.CircleSides = 24
_G.CircleColor = Color3.fromRGB(255,255,255)
_G.CircleTransparency = 0.4
_G.CircleRadius = 80
_G.CircleFilled = false
_G.CircleVisible = false
_G.CircleThickness = 0

local FCircle = Drawing.new("Circle")
FCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FCircle.Radius = _G.CircleRadius
FCircle.Filled = _G.CircleFilled
FCircle.Color = _G.CircleColor
FCircle.Visible = _G.CircleVisible
FCircle.Transparency = _G.CircleTransparency
FCircle.NumSides = _G.CircleSides
FCircle.Thickness = _G.CircleThickness

local function GetClosestPlayer()
    local MaximumDistance = _G.CircleRadius
    local Target = nil

    for _, v in next, Players:GetPlayers() do
        if v.Name ~= LocalPlayer.Name then
            if _G.TeamCheck == true then
                if v.Team ~= LocalPlayer.Team then
                    if v.Character ~= nil then
                        if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
                            if v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("Humanoid").Health ~= 0 then
                                local ScreenPoint = Camera:WorldToScreenPoint(v.Character:WaitForChild("HumanoidRootPart", math.huge).Position)
                                local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude

                                if VectorDistance < MaximumDistance then
                                    Target = v
                                end
                            end
                        end
                    end
                end
            else
                 if v.Character ~= nil then
                    if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
                        if v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("Humanoid").Health ~= 0 then
                            local ScreenPoint = Camera:WorldToScreenPoint(v.Character:WaitForChild("HumanoidRootPart", math.huge).Position)
                            local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
            
                            if VectorDistance < MaximumDistance then
                            Target = v
                            end
                        end
                    end
                end
            end
        end
    end

    return Target
end

UserInputService.InputBegan:Connect(function(Input)
    if Input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = true
    end
end)

UserInputService.InputEnded:Connect(function(Input)
    if Input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = false
    end
end)

RunService.RenderStepped:Connect(function()
    FCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
    FCircle.Radius = _G.CircleRadius
    FCircle.Filled = _G.CircleFilled
    FCircle.Color = _G.CircleColor
    FCircle.Visible = _G.CircleVisible
    FCircle.Transparency = _G.CircleTransparency
    FCircle.NumSides = _G.CircleSides
    FCircle.Thickness = _G.CircleThickness
    if Holding == true and _G.AimbotEnabled == true then
        TweenService:Create(Camera, TweenInfo.new(_G.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, GetClosestPlayer().Character[_G.AimPart].Position)}):Play()
    end
end)
	end    
})

AimbotTab:AddToggle({
	Name = "FOVCircle Visible",
	Default = false,
	Callback = function(visibles)
		_G.CircleVisible = visibles
	end    
})

AimbotTab:AddToggle({
	Name = "TeamCheck",
	Default = false,
	Callback = function(teamcheck)
		_G.TeamCheck = teamcheck
	end    
})

AimbotTab:AddDropdown({
	Name = "HitPart",
	Default = "Head",
	Options = {"Head", "HumanoidRootPart", "Random"},
	Callback = function(hitpartdd)
		_G.AimPart = hitpartdd
	end    
})

AimbotTab:AddSlider({
	Name = "Smoothness",
	Min = 0,
	Max = 0.1,
	Default = 0.05,
	Color = Color3.fromRGB(255,255,255),
	Increment = 0.01,
	ValueName = "Sensitivity",
	Callback = function(smooth)
		_G.Smoothness = smooth
	end    
})

AimbotTab:AddSlider({
	Name = "FOVCircle Sides",
	Min = 32,
	Max = 264,
	Default = 32,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Sides",
	Callback = function(sides)
		_G.CircleSides = sides
	end    
})

AimbotTab:AddSlider({
	Name = "FOV",
	Min = 30,
	Max = 500,
	Default = 80,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Radius",
	Callback = function(radius)
		_G.CircleRadius = radius
	end    
})

AimbotTab:AddSlider({
	Name = "FOV Transparency",
	Min = 0,
	Max = 1,
	Default = 1,
	Color = Color3.fromRGB(255,255,255),
	Increment = 0.1,
	ValueName = "Transparency",
	Callback = function(tranquil)
		_G.CircleTransparency = tranquil
	end    
})

AimbotTab:AddSlider({
	Name = "FOV Thickness",
	Min = 0,
	Max = 30,
	Default = 1,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Thickness",
	Callback = function(joebiden)
		_G.CircleThickness = joebiden
	end    
})

AimbotTab:AddColorpicker({
	Name = "FOVCircle Color",
	Default = Color3.fromRGB(255, 255, 255),
	Callback = function(color)
		_G.CircleColor = (color)
	end	  
})

--Visuals
local VisualsTab = Window:MakeTab({
	Name = "Visuals",
	Icon = "rbxassetid://13255397852",
	PremiumOnly = false
})

local Section = VisualsTab:AddSection({
	Name = "Visuals"
})

local EspLibrary = loadstring(game:HttpGet("https://pastebin.com/raw/e5iDWKnP"))()
EspLibrary.Players = true
EspLibrary:Toggle(true)

VisualsTab:AddToggle({
	Name = "Box Esp",
    Flag = "BoxEsp",
	Default = false,
	Callback = function(ass)
		EspLibrary.Boxes = ass
	end
})

VisualsTab:AddToggle({
	Name = "Name Esp",
    Flag = "NameEsp",
	Default = false,
	Callback = function(as)
		EspLibrary.Names = as
	end
})

VisualsTab:AddToggle({
	Name = "Tracer Esp",
    Flag = "TracerEsp",
	Default = false,
	Callback = function(a)
		EspLibrary.Tracers = a
	end
})

--PLAYER MODS
local PlrMods = Window:MakeTab({
	Name = "Player Mods",
	Icon = "rbxassetid://286958297042",
	PremiumOnly = false
})

local Section = PlrMods:AddSection({
	Name = "PlrMods"
})

PlrMods:AddToggle({
	Name = "Noclip",
    Flag = "Noclip",
	Default = false,
	Callback = function(penis)
        Noclip = penis
        if Noclip == true then
	        loadstring(game:HttpGet("https://pastebin.com/raw/9FrV0pah"))()
        end
	end
})

PlrMods:AddToggle({
	Name = "Inf Jump",
    Flag = "Inf Jump",
	Default = false,
	Callback = function(jmp)
        InfJump = jmp
        if InfJump == true then
            local Player = game:GetService'Players'.LocalPlayer;
            local UIS = game:GetService'UserInputService';
            _G.JumpHeight = 50;
            function Action(Object, Function) if Object ~= nil then Function(Object); end end
            UIS.InputBegan:connect(function(UserInput)
                if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
                    Action(Player.Character.Humanoid, function(self)
                        if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                            Action(self.Parent.HumanoidRootPart, function(self)
                                self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
                            end)
                        end
                    end)
                end
            end)
        end
	end
})
